## Inputs

input ICourseAchievements {
	title: String
	description: String
}

input ICoursePrerequisites {
	title: String
	description: String
}

input ICourseGains {
	title: String
	description: String
}

input ICourseRatingComments {
	title: String
	description: String
	owner: String
	ownerName: String
	ownerRole: String
}

input ICourseUser {
	displayName: String!
	photoURL: String!
	profission: String!
}

input ICourse {
	path: String
	title: String!
	description: String!
	photoURL: String
	videoURL: String
	area: EnumAreas!
	typeContent: EnumContentType!
	difficult: EnumLevels!
}

## Types
type GetCourses {
	courses: [Course]
	success: Success
}

type GetCoursesByOwner {
	coursesByOwner: [Course]
	success: Success
}

type GetCoursesByPath {
	coursesByPath: [Course]
	success: Success
}

type UpdateCourse {
	course: Course
	success: Success
}

type CreateCourse {
	createCourse: String
	success: Success
}

type RemoveCourse {
	removeCourse: String
	success: Success
}

type GetCourseDetail {
	course: Course
	success: Success
}

## Union

union URemoveCourse = RemoveCourse | ErrorResponse
union UUpdateCourse = UpdateCourse | ErrorResponse
union UCreateCourse = CreateCourse | ErrorResponse
union UGetCourses = GetCourses | ErrorResponse
union UGetCoursesByOwner = GetCoursesByOwner | ErrorResponse
union UGetCoursesByPath = GetCoursesByPath | ErrorResponse
union UGetCourseDetail = GetCourseDetail | ErrorResponse

## Queries
type Query {
	getCourses(lastCourse: String): UGetCourses @auth
	getCoursesByUser(uid: String, lastCourse: String): UGetCoursesByOwner @auth
	getCoursesByPath(path: String!, lastCourse: String): UGetCoursesByPath @auth
	getCourseByID(id: String): UGetCourseDetail @auth
}

## Mutations
type Mutation {
	updateCourse(course: ICourse): UUpdateCourse @auth
	createCourse(course: ICourse): UCreateCourse @auth
	removeCourse(course: String): URemoveCourse @auth
}
